<Workspace Version="0.8.1.1942" X="-65.1775964773451" Y="-24.1057083477111" zoom="1.06695270788981" Name="Home" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap>
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Nodes.DSModelElementsSelection guid="94cd8fb7-210a-44a0-a0d9-3d8483d3781a" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="138" y="97.5" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <instance id="4ae9a8fd-d36a-4e50-b353-d51202ea11ad-0009e292" />
      <instance id="4ae9a8fd-d36a-4e50-b353-d51202ea11ad-0009e2d8" />
      <instance id="4ae9a8fd-d36a-4e50-b353-d51202ea11ad-0009e328" />
    </Dynamo.Nodes.DSModelElementsSelection>
    <DSIronPythonNode.PythonNode guid="168fb691-3d17-4398-a726-2dd8ada9385f" type="DSIronPythonNode.PythonNode" nickname="Python Script" x="665" y="172.5" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import RevitAPI
clr.AddReference('RevitAPI')
import Autodesk

# Import DocumentManager and TransactionManager
clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import ToDSType(bool) extension method
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB.Architecture import *
from Autodesk.Revit.DB.Mechanical import *
dataEnteringNode = IN

ducts = UnwrapElement(IN[0])
qi = IN[1]
mo = IN[2]
h = IN[3]/304.8
doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
TransactionManager.Instance.EnsureInTransaction(doc)


ductGroup = []
H=Vector.ByCoordinates(0,0,h)


qi1=qi.ToXyz()
mo1=mo.ToXyz()
outlist = []
chakan = []
o1 = XYZ(0,0,0)
list=[]

def getMinIndex(my_list):
	min = my_list[0]
	for i in my_list:
		if i &lt; min:
			min = i
	return my_list.index(min)

def GetConnectedConnectors(duct):
	connectedConnectors = []
	csIterator = duct.ConnectorManager.Connectors.ForwardIterator()
	connectors = []
	while (csIterator.MoveNext()):
		c = csIterator.Current
		if c.IsConnected == True:
			connectorSet = c.AllRefs
			csIteratorChild = connectorSet.ForwardIterator()
			while (csIteratorChild.MoveNext()):
				cc = csIteratorChild.Current
				if cc != None and cc.Owner.UniqueId != c.Owner.UniqueId:
					connectedConnectors.Add(cc)
	return connectedConnectors
for duct in ducts:
	locCur = duct.Location
	start_point = locCur.Curve.GetEndPoint(0)
	end_point = locCur.Curve.GetEndPoint(1)
	IntersectionResult=locCur.Curve.Project(qi1)
	point1=IntersectionResult.XYZPoint
	IntersectionResult=locCur.Curve.Project(mo1)
	point2=IntersectionResult.XYZPoint
	x1=point1.X
	y1=point1.Y
	z1=point1.Z
	x2=point2.X
	y2=point2.Y
	z2=point2.Z
	qi3=XYZ(x1,y1,z1+h)
	mo3=XYZ(x2,y2,z2+h)
	l1 = Line.CreateBound(start_point,point1)
	l2 = Line.CreateBound(point2, end_point)
	l3 = Line.CreateBound(point1, qi3)
	l4 = Line.CreateBound(qi3,mo3)
	l5 = Line.CreateBound(mo3, point2)
	duct1=ElementTransformUtils.CopyElement(doc, duct.Id, o1)
	duct2=ElementTransformUtils.CopyElement(doc, duct.Id, o1)
	duct11=doc.GetElement(duct1[0])
	duct22=doc.GetElement(duct2[0])
	locCur1 = duct11.Location
	locCur2 = duct22.Location
	locCur1.Curve = l1
	locCur2.Curve = l2
	duct3=ElementTransformUtils.CopyElement(doc, duct.Id, o1)
	duct33=doc.GetElement(duct3[0])
	duct4=ElementTransformUtils.CopyElement(doc, duct.Id, o1)
	duct5=ElementTransformUtils.CopyElement(doc, duct.Id, o1)
	duct44=doc.GetElement(duct4[0])
	duct55=doc.GetElement(duct5[0])
	locCur3 = duct33.Location
	locCur4 = duct44.Location
	locCur5 = duct55.Location
	locCur3.Curve = l3
	locCur4.Curve = l4
	locCur5.Curve = l5
	cs1=duct11.ConnectorManager.Connectors.ForwardIterator()
	cs2=duct22.ConnectorManager.Connectors.ForwardIterator()
	cs3=duct33.ConnectorManager.Connectors.ForwardIterator()
	cs4=duct44.ConnectorManager.Connectors.ForwardIterator()
	cs5=duct55.ConnectorManager.Connectors.ForwardIterator()
	connected = GetConnectedConnectors(duct)
	csIterator = duct.ConnectorManager.Connectors.ForwardIterator()
	while (csIterator.MoveNext()):
		c_current = csIterator.Current
		for c in connected:
			if (c_current.Origin.IsAlmostEqualTo(c.Origin)):
				if (c_current.Origin.IsAlmostEqualTo(start_point)):
					c_current.DisconnectFrom(c)
					csIterator1 = duct11.ConnectorManager.Connectors.ForwardIterator()
					while (csIterator1.MoveNext()):
						c1 = csIterator1.Current
						if (c1.Origin.IsAlmostEqualTo(start_point)):
								c1.ConnectTo(c)
				elif (c_current.Origin.IsAlmostEqualTo(end_point)):
					c_current.DisconnectFrom(c)
					csIterator2 = duct22.ConnectorManager.Connectors.ForwardIterator()
					while (csIterator2.MoveNext()):
						c2 = csIterator2.Current
						if (c2.Origin.IsAlmostEqualTo(end_point)):
							c2.ConnectTo(c)
	csi1=[]
	csi2=[]
	csi3=[]
	csi4=[]
	csi5=[]
	while (cs1.MoveNext()):
		cc1=cs1.Current
		co1=cc1.Origin
		csi1.append(cc1)
		csi1.append(co1)
	while (cs2.MoveNext()):
		cc2=cs2.Current
		co2=cc2.Origin
		csi2.append(cc2)
		csi2.append(co2)
	while (cs3.MoveNext()):
		cc3=cs3.Current
		co3=cc3.Origin
		csi3.append(cc3)
		csi3.append(co3)
	while (cs4.MoveNext()):
		cc4=cs4.Current
		co4=cc4.Origin
		csi4.append(cc4)
		csi4.append(co4)
	while (cs5.MoveNext()):
		cc5=cs5.Current
		co5=cc5.Origin
		csi5.append(cc5)
		csi5.append(co5)
	di1=[]
	di2=[]
	di3=[]
	di4=[]
	for i in range(1,5,2):
		for n in range(1,5,2):
			dis1=csi1[i].DistanceTo(csi3[n])
			di1.append(dis1)
			dis2=csi3[i].DistanceTo(csi4[n])
			di2.append(dis2)
			dis3=csi4[i].DistanceTo(csi5[n])
			di3.append(dis3)
			dis4=csi5[i].DistanceTo(csi2[n])
			di4.append(dis4)
	a1=getMinIndex(di1)
	a2=getMinIndex(di2)
	a3=getMinIndex(di3)
	a4=getMinIndex(di4)
	if a1==0:
		co1=csi1[0]
		co2=csi3[0]
	elif a1==1:
		co1=csi1[0]
		co2=csi3[2]
	elif a1==2:
		co1=csi1[2]
		co2=csi3[0]
	else:
		co1=csi1[2]
		co2=csi3[2]
	
	if a2==0:
		co3=csi3[0]
		co4=csi4[0]
	elif a1==1:
		co3=csi3[0]
		co4=csi4[2]
	elif a1==2:
		co3=csi3[2]
		co4=csi4[0]
	else:
		co3=csi3[2]
		co4=csi4[2]
	
	if a3==0:
		co5=csi4[0]
		co6=csi5[0]
	elif a3==1:
		co5=csi4[0]
		co6=csi5[2]
	elif a3==2:
		co5=csi4[2]
		co6=csi5[0]
	else:
		co5=csi4[2]
		co6=csi5[2]
	
	if a4==0:
		co7=csi5[0]
		co8=csi2[0]
	elif a4==1:
		co7=csi5[0]
		co8=csi2[2]
	elif a4==2:
		co7=csi5[2]
		co8=csi2[0]
	else:
		co7=csi5[2]
		co8=csi2[2]
	wt1= doc.Create.NewElbowFitting(co1, co2)
	wt2= doc.Create.NewElbowFitting(co3, co4)
	wt3= doc.Create.NewElbowFitting(co5, co6)
	wt4= doc.Create.NewElbowFitting(co7, co8)
	ductGroup.Add(duct11)
	ductGroup.Add(duct22)
	ductGroup.Add(duct33)
	ductGroup.Add(duct44)
	ductGroup.Add(duct55)
	ductGroup.Add(wt1)
	ductGroup.Add(wt2)
	ductGroup.Add(wt3)
	ductGroup.Add(wt4)
	doc.Delete(duct.Id)
	outlist.append(ductGroup)
	chakan.append(a1)
	chakan.append(a2)
	chakan.append(a3)
	chakan.append(a4)
	chakan.append(csi3.index(co3))
	chakan.append(csi4.index(co4))
	chakan.append(csi4.index(co5))
	chakan.append(csi5.index(co6))
	csi1=[]
	csi2=[]
	csi3=[]
	csi4=[]
	csi5=[]
	di1=[]
	di2=[]
	di3=[]
	di4=[]
	ductGroup=[]
OUT = chakan</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Watch guid="c0fe6d88-900d-45e0-9f4f-f5aee0d70da6" type="Dynamo.Nodes.Watch" nickname="Watch" x="906.807724615628" y="205.56275133602" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="8162011a-d4d1-4ed1-9a5a-0625fcf17d41" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="104" y="406" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Point.ByCoordinates(0,0,0);" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="fad13e2a-6793-4de5-a50f-d031bad58b2c" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="117" y="299" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Point.ByCoordinates(10000,10000,0);" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="f99da6a0-d39f-49fb-b5c0-6ab66a46e1f1" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="172" y="204" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Point.ByCoordinates(0,0,0);" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="64291c3f-a492-4c1b-b3f8-2e9b2d776767" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="161" y="657" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Point.ByCoordinates(0,0,5000);" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="0579b6f8-a25d-49c9-bfb8-1a8e1335f46d" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="125" y="745" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Point.ByCoordinates(10000,100000,5000);" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="e2ddbe0d-5f6a-45be-8538-785ee7c5d13a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="312" y="487" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="5000;" ShouldFocus="false" />
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="94cd8fb7-210a-44a0-a0d9-3d8483d3781a" start_index="0" end="168fb691-3d17-4398-a726-2dd8ada9385f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="168fb691-3d17-4398-a726-2dd8ada9385f" start_index="0" end="c0fe6d88-900d-45e0-9f4f-f5aee0d70da6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="fad13e2a-6793-4de5-a50f-d031bad58b2c" start_index="0" end="168fb691-3d17-4398-a726-2dd8ada9385f" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="f99da6a0-d39f-49fb-b5c0-6ab66a46e1f1" start_index="0" end="168fb691-3d17-4398-a726-2dd8ada9385f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e2ddbe0d-5f6a-45be-8538-785ee7c5d13a" start_index="0" end="168fb691-3d17-4398-a726-2dd8ada9385f" end_index="3" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
</Workspace>